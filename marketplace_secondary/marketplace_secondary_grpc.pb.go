// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: marketplace_secondary/marketplace_secondary.proto

package marketplace_secondary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketplaceSecondaryClient is the client API for MarketplaceSecondary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceSecondaryClient interface {
	PlaceBid(ctx context.Context, in *PlaceBidRequest, opts ...grpc.CallOption) (*PlaceBidResponse, error)
	PlaceAsk(ctx context.Context, in *PlaceAskRequest, opts ...grpc.CallOption) (*PlaceAskResponse, error)
}

type marketplaceSecondaryClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceSecondaryClient(cc grpc.ClientConnInterface) MarketplaceSecondaryClient {
	return &marketplaceSecondaryClient{cc}
}

func (c *marketplaceSecondaryClient) PlaceBid(ctx context.Context, in *PlaceBidRequest, opts ...grpc.CallOption) (*PlaceBidResponse, error) {
	out := new(PlaceBidResponse)
	err := c.cc.Invoke(ctx, "/marketplace_secondary.MarketplaceSecondary/PlaceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceSecondaryClient) PlaceAsk(ctx context.Context, in *PlaceAskRequest, opts ...grpc.CallOption) (*PlaceAskResponse, error) {
	out := new(PlaceAskResponse)
	err := c.cc.Invoke(ctx, "/marketplace_secondary.MarketplaceSecondary/PlaceAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceSecondaryServer is the server API for MarketplaceSecondary service.
// All implementations must embed UnimplementedMarketplaceSecondaryServer
// for forward compatibility
type MarketplaceSecondaryServer interface {
	PlaceBid(context.Context, *PlaceBidRequest) (*PlaceBidResponse, error)
	PlaceAsk(context.Context, *PlaceAskRequest) (*PlaceAskResponse, error)
	mustEmbedUnimplementedMarketplaceSecondaryServer()
}

// UnimplementedMarketplaceSecondaryServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceSecondaryServer struct {
}

func (UnimplementedMarketplaceSecondaryServer) PlaceBid(context.Context, *PlaceBidRequest) (*PlaceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBid not implemented")
}
func (UnimplementedMarketplaceSecondaryServer) PlaceAsk(context.Context, *PlaceAskRequest) (*PlaceAskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceAsk not implemented")
}
func (UnimplementedMarketplaceSecondaryServer) mustEmbedUnimplementedMarketplaceSecondaryServer() {}

// UnsafeMarketplaceSecondaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceSecondaryServer will
// result in compilation errors.
type UnsafeMarketplaceSecondaryServer interface {
	mustEmbedUnimplementedMarketplaceSecondaryServer()
}

func RegisterMarketplaceSecondaryServer(s grpc.ServiceRegistrar, srv MarketplaceSecondaryServer) {
	s.RegisterService(&MarketplaceSecondary_ServiceDesc, srv)
}

func _MarketplaceSecondary_PlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceSecondaryServer).PlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_secondary.MarketplaceSecondary/PlaceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceSecondaryServer).PlaceBid(ctx, req.(*PlaceBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceSecondary_PlaceAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceAskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceSecondaryServer).PlaceAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_secondary.MarketplaceSecondary/PlaceAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceSecondaryServer).PlaceAsk(ctx, req.(*PlaceAskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketplaceSecondary_ServiceDesc is the grpc.ServiceDesc for MarketplaceSecondary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceSecondary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace_secondary.MarketplaceSecondary",
	HandlerType: (*MarketplaceSecondaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBid",
			Handler:    _MarketplaceSecondary_PlaceBid_Handler,
		},
		{
			MethodName: "PlaceAsk",
			Handler:    _MarketplaceSecondary_PlaceAsk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace_secondary/marketplace_secondary.proto",
}
