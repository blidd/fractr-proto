// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetArtworksByTitle(ctx context.Context, in *GetArtworksByTitleRequest, opts ...grpc.CallOption) (*GetArtworksByTitleResponse, error)
	GetArtworksByArtist(ctx context.Context, in *GetArtworksByArtistRequest, opts ...grpc.CallOption) (*GetArtworksByArtistResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	Ask(ctx context.Context, in *AskRequest, opts ...grpc.CallOption) (*AskResponse, error)
	GetBids(ctx context.Context, in *GetBidsRequest, opts ...grpc.CallOption) (*GetBidsResponse, error)
	GetAsks(ctx context.Context, in *GetAsksRequest, opts ...grpc.CallOption) (*GetAsksResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetArtworksByTitle(ctx context.Context, in *GetArtworksByTitleRequest, opts ...grpc.CallOption) (*GetArtworksByTitleResponse, error) {
	out := new(GetArtworksByTitleResponse)
	err := c.cc.Invoke(ctx, "/service.Service/GetArtworksByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetArtworksByArtist(ctx context.Context, in *GetArtworksByArtistRequest, opts ...grpc.CallOption) (*GetArtworksByArtistResponse, error) {
	out := new(GetArtworksByArtistResponse)
	err := c.cc.Invoke(ctx, "/service.Service/GetArtworksByArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/service.Service/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/service.Service/Bid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Ask(ctx context.Context, in *AskRequest, opts ...grpc.CallOption) (*AskResponse, error) {
	out := new(AskResponse)
	err := c.cc.Invoke(ctx, "/service.Service/Ask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetBids(ctx context.Context, in *GetBidsRequest, opts ...grpc.CallOption) (*GetBidsResponse, error) {
	out := new(GetBidsResponse)
	err := c.cc.Invoke(ctx, "/service.Service/GetBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetAsks(ctx context.Context, in *GetAsksRequest, opts ...grpc.CallOption) (*GetAsksResponse, error) {
	out := new(GetAsksResponse)
	err := c.cc.Invoke(ctx, "/service.Service/GetAsks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	GetArtworksByTitle(context.Context, *GetArtworksByTitleRequest) (*GetArtworksByTitleResponse, error)
	GetArtworksByArtist(context.Context, *GetArtworksByArtistRequest) (*GetArtworksByArtistResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	Bid(context.Context, *BidRequest) (*BidResponse, error)
	Ask(context.Context, *AskRequest) (*AskResponse, error)
	GetBids(context.Context, *GetBidsRequest) (*GetBidsResponse, error)
	GetAsks(context.Context, *GetAsksRequest) (*GetAsksResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetArtworksByTitle(context.Context, *GetArtworksByTitleRequest) (*GetArtworksByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtworksByTitle not implemented")
}
func (UnimplementedServiceServer) GetArtworksByArtist(context.Context, *GetArtworksByArtistRequest) (*GetArtworksByArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtworksByArtist not implemented")
}
func (UnimplementedServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedServiceServer) Bid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedServiceServer) Ask(context.Context, *AskRequest) (*AskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (UnimplementedServiceServer) GetBids(context.Context, *GetBidsRequest) (*GetBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids not implemented")
}
func (UnimplementedServiceServer) GetAsks(context.Context, *GetAsksRequest) (*GetAsksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsks not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetArtworksByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtworksByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetArtworksByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetArtworksByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetArtworksByTitle(ctx, req.(*GetArtworksByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetArtworksByArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtworksByArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetArtworksByArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetArtworksByArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetArtworksByArtist(ctx, req.(*GetArtworksByArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Bid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Bid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Ask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Ask(ctx, req.(*AskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBids(ctx, req.(*GetBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetAsks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetAsks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/GetAsks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetAsks(ctx, req.(*GetAsksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtworksByTitle",
			Handler:    _Service_GetArtworksByTitle_Handler,
		},
		{
			MethodName: "GetArtworksByArtist",
			Handler:    _Service_GetArtworksByArtist_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Service_GetUserProfile_Handler,
		},
		{
			MethodName: "Bid",
			Handler:    _Service_Bid_Handler,
		},
		{
			MethodName: "Ask",
			Handler:    _Service_Ask_Handler,
		},
		{
			MethodName: "GetBids",
			Handler:    _Service_GetBids_Handler,
		},
		{
			MethodName: "GetAsks",
			Handler:    _Service_GetAsks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
